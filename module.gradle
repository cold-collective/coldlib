boolean hasMc() {
    return project.hasProperty("hasMC") && project.hasMC
}

boolean hasTesting() {
    return project.hasProperty("hasTesting") && project.hasTesting
}

boolean hasPublishing() {
    return plugins.hasPlugin("maven-publish") && plugins.hasPlugin("signing")
}

File getResourceInRoot(String str) {
    File res = new File("./" + str)
    if (!res.exists())
        res = new File("../" + str)
    return res
}

// Plugins

group 'net.orbyfied.coldlib'

if (hasMc()) {
    // set default minecraft version
    if (!project.hasProperty("versionMC")) {
        project.ext {
            versionMC = rootProject.defaultVersionMC
        }
    }

    dependencies {
        // Minecraft
        if (project.hasProperty("versionMC")) {
            paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:" + project.versionMC)
        }
    }
}

group 'net.orbyfied.coldlib'

// apply java plugins
apply plugin: 'java'
apply plugin: 'java-library'

// apply shadow
apply plugin: 'com.github.johnrengelman.shadow'

if (hasMc()) {
    apply plugin: 'io.papermc.paperweight.userdev'
}

java {
    // Configure the java toolchain. This allows gradle to auto-provision JDK 17 on systems that only have JDK 8 installed for example.
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

// Task Configuration

java {
    if (plugins.hasPlugin("java-library")) {
        withJavadocJar()
        withSourcesJar()
    }
}

if (plugins.hasPlugin("java-library")) {
    javadoc {
        boolean verbose = false
        if (project.hasProperty("jdVerbose"))
            verbose = jdVerbose
        options.outputLevel = verbose ? JavadocOutputLevel.VERBOSE : JavadocOutputLevel.QUIET
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }
}

if (hasPublishing()) {
    publish.dependsOn.add(tasks.jar)
}

assemble {
    dependsOn(shadowJar) }

if (hasMc()) {
    assemble { dependsOn(shadowJar, reobfJar) }
}

compileJava {
    options.encoding = 'UTF-8'
    options.release.set(17) }
javadoc {
    options.encoding = 'UTF-8' }
processResources {
    filteringCharset = 'UTF-8' }

tasks {
    String mcS = "";
    if (hasMc())
        mcS = "+" + project.versionMC;
    String fn = project.name + "-" + project.version + mcS + ".jar";
    outputFile(file("../builds/" + fn));
}

// Dependencies

repositories {
    mavenCentral()
    mavenLocal()

    maven { url = 'https://s01.oss.sonatype.org/content/repositories/releases/' }
}

dependencies {

    // External Libraries
    compileOnlyApi 'it.unimi.dsi:fastutil:8.5.8'

//    api 'net.orbyfied.j8:j8-registry:0.1.0'
    api 'net.orbyfied.j8:j8-util:0.2.1.3'
//    api 'net.orbyfied.j8:j8-event:0.1.0_hotfix1'

    if (hasTesting()) {
        // Test Dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }
}

// Test Configuration

if (hasTesting()) {
    test {
        // enable JUnit for testing
        useJUnitPlatform()
    }
}


// Publishing

if (hasPublishing()) {

    publishing {

        publications {

            mavenJava(MavenPublication) {

                // publication properties
                groupId = project.group
                artifactId = project.name
                version = project.version

                // include java code
                from components.java

                pom {
                    // pom.xml properties
                    name = project.name

                    String descStr = null
                    if (project.hasProperty("desc"))
                        descStr = project.desc
                    description = "coldlib Module " + project.name + (descStr != null ? " - " + descStr : "")

                    url = "https://github.com/cold-collective/coldlib"
                    inceptionYear = "2022"

                    // licensing
                    licenses {
                        license {
                            name = "Apache License 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0"
                        }
                    }

                    // developers
                    developers {
                        developer {
                            id = "orbyfied"
                            name = "orbyfied"
                            email = ""
                        }
                    }

                    // SCM
                    scm {
                        connection = "scm:git:git:github.com/cold-collective/coldlib.git"
                        developerConnection = "scm:git:ssh://github.com/cold-collective/coldlib.git"
                        url = "https://github.com/cold-collective/coldlib.git"
                    }


                }

            }

        }

        // publishing repositories
        repositories {
            // Maven Central
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = project.properties["ossrh.username"]
                    password = project.properties["ossrh.password"]
                }
            }
        }

    }

    // Publication Signing
    signing {
        sign publishing.publications.mavenJava
    }

}